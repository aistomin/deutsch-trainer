/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.udt;


import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.codegen.maven.example.Public;
import org.jooq.codegen.maven.example.udt.records.ValidDetailRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValidDetail extends UDTImpl<ValidDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.valid_detail</code>
     */
    public static final ValidDetail VALID_DETAIL = new ValidDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValidDetailRecord> getRecordType() {
        return ValidDetailRecord.class;
    }

    /**
     * The attribute <code>public.valid_detail.valid</code>.
     */
    public static final UDTField<ValidDetailRecord, Boolean> VALID = createField(DSL.name("valid"), SQLDataType.BOOLEAN, VALID_DETAIL, "");

    /**
     * The attribute <code>public.valid_detail.reason</code>.
     */
    public static final UDTField<ValidDetailRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR, VALID_DETAIL, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public static final UDTField<ValidDetailRecord, Object> LOCATION = createField(DSL.name("location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), VALID_DETAIL, "");

    /**
     * No further instances allowed
     */
    private ValidDetail() {
        super("valid_detail", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
